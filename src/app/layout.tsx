import type { Metadata } from "next";
import {
  Syne,
  Aladin,
  Big_Shoulders_Display,
  Marcellus,
} from "next/font/google";
import localFont from "next/font/local";
import { ThemeProvider } from "next-themes";
import "./globals.scss";
import "@/styles/marquee.css";
import GoogleAnalytics from "@/components/GoogleAnalytics";
import { createMetadata } from "@/utils/metadata";
import Script from "next/script";

const gellery = localFont({
  src: [
    {
      path: "../../public/assets/fonts/gallerymodern-webfont.woff2",
      weight: "400",
      style: "normal",
    },
    {
      path: "../../public/assets/fonts/gallerymodern-webfont.woff",
      weight: "400",
      style: "normal",
    },
  ],
  variable: "--tp-ff-gallery",
  display: "swap",
  preload: true,
});

const aladin = Aladin({
  weight: ["400"],
  subsets: ["latin"],
  variable: "--tp-ff-aladin",
  display: "swap",
});

// Optimize Syne font by using a single definition with all weights
const syne = Syne({
  weight: ["400", "500", "600", "700", "800"],
  subsets: ["latin"],
  variable: "--tp-ff-syne",
  display: "swap",
});

const big_shoulders = Big_Shoulders_Display({
  weight: ["400", "500", "600", "700", "800"],
  subsets: ["latin"],
  variable: "--tp-ff-shoulders",
  display: "swap",
});

const marcellus = Marcellus({
  weight: ["400"],
  subsets: ["latin"],
  variable: "--tp-ff-marcellus",
  display: "swap",
});

const baseMetadata: Metadata = {
  title: "Liko - Creative agency & portfolio Next js Template",
  description: "Generated by create next app",
  verification: {
    google: 'fvBLEq97e4pjzycuANSfPW7_vzv02HJr-dA-TuEM0zY'
  }
};

export const metadata = createMetadata(baseMetadata, '/');

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning={true}>
      <head>
        {/* Preload critical font */}
        <link
          rel="preload"
          href="/assets/fonts/gallerymodern-webfont.woff2"
          as="font"
          type="font/woff2"
          crossOrigin="anonymous"
        />
        
        {/* Preconnect to external domains to reduce connection time */}
        <link rel="preconnect" href="https://blog.biztalbox.com" />
        <link rel="dns-prefetch" href="https://blog.biztalbox.com" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
        
        {/* Add resource hints */}
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />

        {/* Google Tag Manager */}
        <Script id="google-tag-manager" strategy="afterInteractive">
          {`
            (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
            new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
            j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
            'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
            })(window,document,'script','dataLayer','GTM-KQ4NX3MM');
          `}
        </Script>
        {/* End Google Tag Manager */}
      </head>
      <body
        id="body"
        suppressHydrationWarning={true}
        className={`${gellery.variable} ${aladin.variable} ${syne.variable} ${big_shoulders.variable} ${marcellus.variable} font-optimization-applied`}
      >
        {/* Google Tag Manager (noscript) */}
        <noscript>
          <iframe
            src="https://www.googletagmanager.com/ns.html?id=GTM-KQ4NX3MM"
            height="0"
            width="0"
            style={{ display: 'none', visibility: 'hidden' }}
          />
        </noscript>
        {/* End Google Tag Manager (noscript) */}
        
        {process.env.NEXT_PUBLIC_GA_MEASUREMENT_ID && (
          <GoogleAnalytics GA_MEASUREMENT_ID={process.env.NEXT_PUBLIC_GA_MEASUREMENT_ID} />
        )}
        <ThemeProvider defaultTheme="dark">{children}</ThemeProvider>
        
        {/* Defer non-critical scripts */}
        <Script
          id="performance-monitoring"
          strategy="lazyOnload"
          dangerouslySetInnerHTML={{
            __html: `
              // Performance monitoring
              window.addEventListener('load', () => {
                // Report Web Vitals
                if ('performance' in window && 'measure' in window.performance) {
                  try {
                    // Measure LCP
                    new PerformanceObserver((entryList) => {
                      const entries = entryList.getEntries();
                      if (entries.length > 0) {
                        console.log('LCP:', entries[entries.length - 1].startTime);
                      }
                    }).observe({type: 'largest-contentful-paint', buffered: true});
                    
                    // Measure CLS
                    new PerformanceObserver((entryList) => {
                      let cls = 0;
                      for (const entry of entryList.getEntries()) {
                        if (!entry.hadRecentInput) {
                          cls += entry.value;
                        }
                      }
                      console.log('CLS:', cls);
                    }).observe({type: 'layout-shift', buffered: true});
                  } catch (e) {
                    console.error('Error measuring performance:', e);
                  }
                }
              });
            `,
          }}
        />
      </body>
    </html>
  );
}
